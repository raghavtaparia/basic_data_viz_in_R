new111.R
ajay

Sun Jul 12 16:16:12 2015

library(RColorBrewer)

data(VADeaths)
par(mfrow=c(2,3))
hist(VADeaths,breaks=10, col=brewer.pal(3,"Set3"),main="Set3 3 colors")
hist(VADeaths,breaks=3 ,col=brewer.pal(3,"Set2"),main="Set2 3 colors")
hist(VADeaths,breaks=7, col=brewer.pal(3,"Set1"),main="Set1 3 colors")
hist(VADeaths,,breaks= 2, col=brewer.pal(8,"Set3"),main="Set3 8 colors")
hist(VADeaths,col=brewer.pal(8,"Greys"),main="Greys 8 colors")
hist(VADeaths,col=brewer.pal(8,"Greens"),main="Greens 8 colors")


par(mfrow=c(1,1))

plot(AirPassengers,type="l")


par(mfrow=c(3,1))
barplot(iris$Petal.Length) #Creating simple Bar Graph
barplot(iris$Sepal.Length,col  = brewer.pal(3,"Set1")) 
barplot(table(iris$Species,iris$Sepal.Length),col  = brewer.pal(3,"Set1")) 


data(iris)
par(mfrow=c(2,2))
boxplot(iris$Sepal.Length,col="red")
boxplot(iris$Sepal.Length~iris$Species,col="red")
boxplot(iris$Sepal.Length~iris$Species,col=heat.colors(3))
boxplot(iris$Sepal.Length~iris$Species,col=topo.colors(3))


par(mfrow=c(2,1))
plot(x=iris$Petal.Length) #Simple Scatter Plot
plot(x=iris$Petal.Length,y=iris$Species) #Multivariate Scatter Plot


par(mfrow=c(1,1))
plot(iris,col=brewer.pal(3,"Set1"))


par(mar = rep(2, 4))

par(mfrow=c(5,2))

plot(iris$Petal.Length)
plot(iris$Petal.Length,type='l')
plot(iris$Petal.Length,iris$Species)
plot(iris$Petal.Length,iris$Species,col='blue')
plot(iris$Petal.Length,iris$Species,col='blue',main="Title")

plot(iris$Petal.Length,iris$Species,col='blue',main="Title")
plot(iris$Species,iris$Petal.Length,col='blue',main="Title")

boxplot(iris$Petal.Length)
boxplot(iris$Petal.Length~iris$Species)

barplot(iris$Petal.Length)


par(mfrow=c(1,1))
library(ggplot2)
data(diamonds)
library(hexbin)
a=hexbin(diamonds$price,diamonds$carat,xbins=40)
library(RColorBrewer)
plot(a)


library(RColorBrewer)
rf <- colorRampPalette(rev(brewer.pal(12,'Set3')))
hexbinplot(diamonds$price~diamonds$carat, data=diamonds, colramp=rf)


library(vcd)
## Loading required package: grid
data(HairEyeColor)
mosaicplot(HairEyeColor)


library(dplyr)
## 
## Attaching package: 'dplyr'
## 
## The following objects are masked from 'package:stats':
## 
##     filter, lag
## 
## The following objects are masked from 'package:base':
## 
##     intersect, setdiff, setequal, union
library(tidyr)
library(magrittr)
## 
## Attaching package: 'magrittr'
## 
## The following object is masked from 'package:tidyr':
## 
##     extract
b=diamonds %>%
  group_by(cut, color) %>%
  summarise(price = mean(price)) %>%
  spread(color, price)
b
## Source: local data frame [5 x 8]
## 
##         cut        D        E        F        G        H        I        J
## 1      Fair 4291.061 3682.312 3827.003 4239.255 5135.683 4685.446 4975.655
## 2      Good 3405.382 3423.644 3495.750 4123.482 4276.255 5078.533 4574.173
## 3 Very Good 3470.467 3214.652 3778.820 3872.754 4535.390 5255.880 5103.513
## 4   Premium 3631.293 3538.914 4324.890 4500.742 5216.707 5946.181 6294.592
## 5     Ideal 2629.095 2597.550 3374.939 3720.706 3889.335 4451.970 4918.186
heatmap(as.matrix(mtcars)) 


image(as.matrix(b[2:7]))


library(tabplot)
## Loading required package: ffbase
## Loading required package: ff
## Loading required package: bit
## Attaching package bit
## package:bit (c) 2008-2012 Jens Oehlschlaegel (GPL-2)
## creators: bit bitwhich
## coercion: as.logical as.integer as.bit as.bitwhich which
## operator: ! & | xor != ==
## querying: print length any all min max range sum summary
## bit access: length<- [ [<- [[ [[<-
## for more help type ?bit
## 
## Attaching package: 'bit'
## 
## The following object is masked from 'package:base':
## 
##     xor
## 
## Attaching package ff
## - getOption("fftempdir")=="/tmp/RtmpMNDSWE"
## 
## - getOption("ffextension")=="ff"
## 
## - getOption("ffdrop")==TRUE
## 
## - getOption("fffinonexit")==TRUE
## 
## - getOption("ffpagesize")==65536
## 
## - getOption("ffcaching")=="mmnoflush"  -- consider "ffeachflush" if your system stalls on large writes
## 
## - getOption("ffbatchbytes")==16777216 -- consider a different value for tuning your system
## 
## - getOption("ffmaxbytes")==536870912 -- consider a different value for tuning your system
## 
## 
## Attaching package: 'ff'
## 
## The following objects are masked from 'package:bit':
## 
##     clone, clone.default, clone.list
## 
## The following object is masked from 'package:magrittr':
## 
##     add
## 
## The following objects are masked from 'package:utils':
## 
##     write.csv, write.csv2
## 
## The following objects are masked from 'package:base':
## 
##     is.factor, is.ordered
## 
## 
## Attaching package: 'ffbase'
## 
## The following objects are masked from 'package:ff':
## 
##     [<-.ff, [.ff
## 
## The following objects are masked from 'package:base':
## 
##     %in%, table
tableplot(diamonds)


library(magrittr)
library(leaflet)
m <- leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=77.2310, lat=28.6560, popup="The delicious food of chandni chowk")
m  # Print the map


+
-
Leaflet | Â© OpenStreetMap contributors, CC-BY-SA
library(car)
data(iris, package="datasets")
scatter3d(Petal.Width~Petal.Length+Sepal.Length|Species, data=iris, fit="linear", 
          residuals=TRUE, parallel=FALSE, bg="black", axis.scales=TRUE, grid=TRUE, ellipsoid=FALSE)
## Loading required namespace: rgl
attach(iris)
# 3d scatterplot by factor level 
library(lattice)
cloud(Sepal.Length~Sepal.Width*Petal.Length|Species, main="3D Scatterplot by Species") 


xyplot(Sepal.Width ~ Sepal.Length, iris, groups = iris$Species, pch= 20)


library(corrgram)
cor(iris[1:4])
##              Sepal.Length Sepal.Width Petal.Length Petal.Width
## Sepal.Length    1.0000000  -0.1175698    0.8717538   0.8179411
## Sepal.Width    -0.1175698   1.0000000   -0.4284401  -0.3661259
## Petal.Length    0.8717538  -0.4284401    1.0000000   0.9628654
## Petal.Width     0.8179411  -0.3661259    0.9628654   1.0000000
corrgram(iris)


data(iris)
par(mfrow=c(2,2))
boxplot(iris$Sepal.Length,col="green")
boxplot(iris$Sepal.Length~iris$Species,col="yellow")
boxplot(iris$Sepal.Length~iris$Species,col=heat.colors(5))
boxplot(iris$Sepal.Length~iris$Species,col=topo.colors(7))


